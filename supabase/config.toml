# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "tutusporta"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` is always included.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request. `public` is always included.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a table or view. Limits payload size for accidental or
# malicious requests.
max_rows = 1000

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv6)
# ip_version = "IPv6"

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1:54321"
# OpenAI API Key to use for Supabase AI.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - emails are
# recorded and made available for viewing at `http://localhost:54324`.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://localhost:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://tutusporta.com", "https://tutusporta-5lnr57bwp-jeffreyaay-gmailcoms-projects.vercel.app"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = true

# Uncomment to customize email template
[auth.email.template.invite]
subject = "Je bent uitgenodigd voor TutusPorta"
content_path = "./supabase/templates/invite.html"

[auth.email.template.confirmation]
subject = "Bevestig je TutusPorta account"
content_path = "./supabase/templates/confirmation.html"

[auth.email.template.recovery]
subject = "Reset je TutusPorta wachtwoord"
content_path = "./supabase/templates/recovery.html"

[auth.email.template.email_change]
subject = "Bevestig je nieuwe email voor TutusPorta"
content_path = "./supabase/templates/email_change.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = true
# Template for sending a confirmation message. Variables within double curly braces are replaced dynamically.
confirmation_template = "Your confirmation code is {{ .Code }} ."
# Template for sending a recovery message. Variables within double curly braces are replaced dynamically.
recovery_template = "Your recovery code is {{ .Code }} ."

# Use pre-defined map of claims
[auth.jwt]
default_group_name = "authenticated"
admin_group_name = "service_role"

# Hook to call when a user signs up. Used to a profile when a new user signs up via oAuth.
[auth.hook.custom_access_token]
enabled = false
uri = "pg-functions://postgres/custom_access_token"

# Use an external OAuth provider. The full list of providers are:
# `apple`, `azure`, `bitbucket`, `discord`, `facebook`, `github`, `gitlab`, `google`,
# `keycloak`, `linkedin`, `notion`, `twitch`, `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = "env(SUPABASE_AUTH_APPLE_CLIENT_ID)"
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = "env(SUPABASE_AUTH_APPLE_REDIRECT_URI)"
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = "env(SUPABASE_AUTH_APPLE_URL)"

[auth.external.azure]
enabled = false
client_id = "env(SUPABASE_AUTH_AZURE_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_AZURE_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_AZURE_REDIRECT_URI)"
url = "env(SUPABASE_AUTH_AZURE_URL)"

[auth.external.bitbucket]
enabled = false
client_id = "env(SUPABASE_AUTH_BITBUCKET_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_BITBUCKET_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_BITBUCKET_REDIRECT_URI)"
url = "env(SUPABASE_AUTH_BITBUCKET_URL)"

[auth.external.discord]
enabled = false
client_id = "env(SUPABASE_AUTH_DISCORD_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_DISCORD_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_DISCORD_REDIRECT_URI)"

[auth.external.facebook]
enabled = false
client_id = "env(SUPABASE_AUTH_FACEBOOK_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_FACEBOOK_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_FACEBOOK_REDIRECT_URI)"

[auth.external.github]
enabled = true
client_id = "env(SUPABASE_AUTH_GITHUB_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_GITHUB_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_GITHUB_REDIRECT_URI)"

[auth.external.gitlab]
enabled = false
client_id = "env(SUPABASE_AUTH_GITLAB_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_GITLAB_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_GITLAB_REDIRECT_URI)"
url = "env(SUPABASE_AUTH_GITLAB_URL)"

[auth.external.google]
enabled = true
client_id = "env(SUPABASE_AUTH_GOOGLE_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_GOOGLE_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_GOOGLE_REDIRECT_URI)"

[auth.external.keycloak]
enabled = false
client_id = "env(SUPABASE_AUTH_KEYCLOAK_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_KEYCLOAK_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_KEYCLOAK_REDIRECT_URI)"
url = "env(SUPABASE_AUTH_KEYCLOAK_URL)"

[auth.external.linkedin]
enabled = false
client_id = "env(SUPABASE_AUTH_LINKEDIN_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_LINKEDIN_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_LINKEDIN_REDIRECT_URI)"

[auth.external.notion]
enabled = false
client_id = "env(SUPABASE_AUTH_NOTION_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_NOTION_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_NOTION_REDIRECT_URI)"

[auth.external.twitch]
enabled = false
client_id = "env(SUPABASE_AUTH_TWITCH_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_TWITCH_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_TWITCH_REDIRECT_URI)"

[auth.external.twitter]
enabled = false
client_id = "env(SUPABASE_AUTH_TWITTER_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_TWITTER_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_TWITTER_REDIRECT_URI)"

[auth.external.slack]
enabled = false
client_id = "env(SUPABASE_AUTH_SLACK_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_SLACK_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_SLACK_REDIRECT_URI)"

[auth.external.spotify]
enabled = false
client_id = "env(SUPABASE_AUTH_SPOTIFY_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_SPOTIFY_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_SPOTIFY_REDIRECT_URI)"

[auth.external.workos]
enabled = false
client_id = "env(SUPABASE_AUTH_WORKOS_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_WORKOS_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_WORKOS_REDIRECT_URI)"

[auth.external.zoom]
enabled = false
client_id = "env(SUPABASE_AUTH_ZOOM_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_ZOOM_SECRET)"
redirect_uri = "env(SUPABASE_AUTH_ZOOM_REDIRECT_URI)"

[analytics]
enabled = false
port = 54327
vector_port = 54328
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage-engine with S3 as the data source
[experimental.s3]
enabled = false
# AWS credentials
access_key_id = "env(SUPABASE_S3_ACCESS_KEY_ID)"
secret_access_key = "env(SUPABASE_S3_SECRET_ACCESS_KEY)"
# AWS S3 bucket config
region = "env(SUPABASE_S3_REGION)"
bucket = "env(SUPABASE_S3_BUCKET)"