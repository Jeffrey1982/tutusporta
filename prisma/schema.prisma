generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // runtime (can be Supabase pooler 6543)
  directUrl = env("DIRECT_URL")   // migrations (direct 5432)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  sites     Site[]

  // Personal information
  firstName    String?
  lastName     String?
  company      String?
  jobTitle     String?
  phoneNumber  String?
  website      String?
  country      String?

  // Marketing preferences
  marketingEmails    Boolean @default(true)
  productUpdates     Boolean @default(true)
  teamInvitations    Boolean @default(true)
  scanNotifications  Boolean @default(true)
  weeklyReports      Boolean @default(false)

  // Profile completion
  profileCompleted Boolean @default(false)

  // Billing fields
  plan               Plan     @default(TRIAL)  // TRIAL, STARTER, PRO, BUSINESS
  subscriptionStatus String   @default("inactive") // active, canceled, past_due, inactive
  trialEndsAt        DateTime?

  // Mollie koppelingen
  mollieCustomerId      String? @unique
  mollieSubscriptionId  String? // actuele sub (1 actief tegelijk)

  usages             Usage[]
  whiteLabel         WhiteLabel?
  portfolios         Portfolio[]

  // Team collaboration
  ownedTeams         Team[] @relation("TeamOwner")
  teamMemberships    TeamMember[]
  sentInvites        TeamInvite[] @relation("InvitedBy")
  invitedBy          TeamMember[] @relation("InvitedByUser")

  // Issue tracking
  createdIssues      Issue[] @relation("CreatedBy")
  assignedIssues     Issue[] @relation("AssignedTo")
  assignedByIssues   Issue[] @relation("AssignedBy")
  resolvedIssues     Issue[] @relation("ResolvedBy")
  issueComments      IssueComment[]
  issueActivities    IssueActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Site {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  url         String
  pages       Page[]
  scans       Scan[]
  crawls      Crawl[]

  // Portfolio association
  portfolioId String?
  portfolio   Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: SetNull)

  // Team collaboration
  teams       Team[]     @relation("TeamSites")

  createdAt   DateTime   @default(now())

  @@unique([userId, url]) // enables where: { userId_url: { ... } }
  @@index([userId])
  @@index([portfolioId])
}

model Page {
  id            String   @id @default(cuid())
  siteId        String
  site          Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  url           String
  title         String?
  latestScanId  String?
  scans         Scan[]
  createdAt     DateTime @default(now())

  @@unique([siteId, url]) // enables where: { siteId_url: { ... } }
  @@index([siteId])
}

model Scan {
  id        String   @id @default(cuid())
  siteId    String
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  // NEW: optional link to Page
  pageId    String?
  page      Page?    @relation(fields: [pageId], references: [id], onDelete: SetNull)

  status    String
  score     Int?
  issues    Int?
  reportUrl String?

  // Issue tracking
  scanIssues Issue[]

  // Impact counts
  impactCritical Int @default(0)
  impactSerious  Int @default(0)
  impactModerate Int @default(0)
  impactMinor    Int @default(0)

  // Enhanced analytics fields
  previousScanId String? // Link to previous scan for comparison
  previousScan   Scan?   @relation("ScanHistory", fields: [previousScanId], references: [id])
  nextScans      Scan[]  @relation("ScanHistory")

  scoreImprovement Int? // Change from previous scan
  issuesFixed      Int @default(0) // Issues resolved since last scan
  newIssues        Int @default(0) // New issues found since last scan

  // WCAG compliance tracking
  wcagAACompliance  Float? // Percentage of AA compliance (0-100)
  wcagAAACompliance Float? // Percentage of AAA compliance (0-100)

  // Violation categorization for trending
  violationsByRule Json? // { "rule_id": count, ... } for trending analysis

  // Performance & SEO Integration
  performanceScore    Float? // Google PageSpeed Insights score (0-100)
  firstContentfulPaint Float? // FCP in milliseconds
  largestContentfulPaint Float? // LCP in milliseconds
  cumulativeLayoutShift Float? // CLS score
  firstInputDelay     Float? // FID in milliseconds
  totalBlockingTime   Float? // TBT in milliseconds

  // SEO correlation data
  seoScore           Float? // Overall SEO health score (0-100)
  metaDescription    String? // Meta description present/quality
  headingStructure   Json? // H1-H6 structure analysis
  altTextCoverage    Float? // Percentage of images with alt text
  linkAccessibility  Float? // Percentage of accessible links

  // Legal compliance risk assessment
  adaRiskLevel       String? // LOW, MEDIUM, HIGH, CRITICAL
  wcag21Compliance   Float? // WCAG 2.1 compliance percentage
  wcag22Compliance   Float? // WCAG 2.2 compliance percentage
  complianceGaps     Json? // Specific compliance issues
  legalRiskScore     Float? // Calculated legal risk (0-100)

  // Performance metrics
  scanDuration    Int? // Scan duration in milliseconds
  pageLoadTime    Int? // Page load time in milliseconds
  elementsScanned Int? // Number of elements analyzed

  // Raw scan data
  raw       Json?

  createdAt DateTime @default(now())

  @@index([siteId])
  @@index([pageId])
  @@index([createdAt]) // For historical queries
  @@index([siteId, createdAt]) // For site-specific historical queries
}

enum Plan {
  TRIAL
  STARTER
  PRO
  BUSINESS
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  period    String   // "2025-09"
  pages     Int      @default(0)
  sites     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period])
}

model Crawl {
  id           String   @id @default(cuid())
  siteId       String
  site         Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  status       String   @default("queued") // queued, running, done, error
  maxPages     Int      @default(50)
  maxDepth     Int      @default(3)
  
  pagesQueued  Int      @default(0)
  pagesDone    Int      @default(0)
  pagesError   Int      @default(0)
  
  startedAt    DateTime @default(now())
  finishedAt   DateTime?
  
  crawlUrls    CrawlUrl[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([siteId])
  @@index([status])
}

model CrawlUrl {
  id       String @id @default(cuid())
  crawlId  String
  crawl    Crawl  @relation(fields: [crawlId], references: [id], onDelete: Cascade)
  
  url      String
  depth    Int    @default(0)
  status   String @default("queued") // queued, running, done, error, skipped
  reason   String? // Error reason or skip reason
  
  createdAt DateTime @default(now())
  processedAt DateTime?

  @@unique([crawlId, url]) // Prevent duplicate URLs in same crawl
  @@index([crawlId, status])
}

model Benchmark {
  id          String   @id @default(cuid())

  // Industry/category benchmarks
  industry    String   // e.g., "ecommerce", "healthcare", "education", "government"
  category    String?  // sub-category if applicable

  // Benchmark scores
  avgScore           Float  // Average accessibility score
  avgCritical        Float  // Average critical issues per page
  avgSerious         Float  // Average serious issues per page
  avgModerate        Float  // Average moderate issues per page
  avgMinor           Float  // Average minor issues per page

  // WCAG compliance averages
  avgWcagAA          Float  // Average AA compliance percentage
  avgWcagAAA         Float  // Average AAA compliance percentage

  // Sample size and metadata
  sampleSize         Int    // Number of sites/pages in benchmark
  lastUpdated        DateTime @default(now())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([industry, category])
  @@index([industry])
}

model WhiteLabel {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Branding
  companyName     String?
  logoUrl         String?
  faviconUrl      String?

  // Colors
  primaryColor    String   @default("#3B82F6")   // Blue-500
  secondaryColor  String   @default("#1F2937")   // Gray-800
  accentColor     String   @default("#10B981")   // Green-500
  
  // Contact Information
  supportEmail    String?
  website         String?
  phone           String?
  
  // Footer Customization
  footerText      String?
  showPoweredBy   Boolean  @default(true)
  
  // Domain Settings
  customDomain    String?
  subdomain       String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model Portfolio {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name            String   // Portfolio name (e.g., "Main Sites", "Client Portfolio")
  description     String?

  // Portfolio-wide metrics
  totalSites      Int      @default(0)
  avgScore        Float?   // Average accessibility score across all sites
  totalIssues     Int      @default(0)
  riskScore       Float?   // Combined legal/compliance risk

  // Performance correlation
  avgPerformance  Float?   // Average performance score
  performanceCorrelation Float? // Correlation between accessibility and performance

  // Portfolio prioritization
  priorityMatrix  Json?    // Impact/effort matrix data

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Portfolio can contain multiple sites
  sites           Site[]

  @@index([userId])
}

enum TeamRole {
  ADMIN
  EDITOR
  VIEWER
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  members     TeamMember[]
  invites     TeamInvite[]
  sites       Site[]   @relation("TeamSites")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId])
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      TeamRole @default(VIEWER)
  invitedBy String?
  inviter   User?    @relation("InvitedByUser", fields: [invitedBy], references: [id], onDelete: SetNull)
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model TeamInvite {
  id         String   @id @default(cuid())
  teamId     String
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  email      String
  role       TeamRole @default(VIEWER)
  invitedBy  String
  inviter    User     @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  token      String   @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime @default(now())

  @@index([teamId])
  @@index([email])
}

model Issue {
  id            String        @id @default(cuid())
  scanId        String
  scan          Scan          @relation(fields: [scanId], references: [id], onDelete: Cascade)
  violationId   String        // Reference to specific violation in scan.raw
  title         String
  description   String?
  status        IssueStatus   @default(OPEN)
  priority      IssuePriority @default(MEDIUM)

  assignedToId  String?
  assignedTo    User?         @relation("AssignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedById  String?
  assignedBy    User?         @relation("AssignedBy", fields: [assignedById], references: [id], onDelete: SetNull)
  createdById   String
  createdBy     User          @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  resolvedAt    DateTime?
  resolvedById  String?
  resolvedBy    User?         @relation("ResolvedBy", fields: [resolvedById], references: [id], onDelete: SetNull)

  dueDate       DateTime?
  estimatedHours Int?
  actualHours   Int?
  tags          String[]

  comments      IssueComment[]
  activities    IssueActivity[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([scanId, violationId])
  @@index([scanId])
  @@index([assignedToId])
  @@index([createdById])
  @@index([status])
  @@index([priority])
}

model IssueComment {
  id        String   @id @default(cuid())
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([issueId])
  @@index([userId])
}

model IssueActivity {
  id        String   @id @default(cuid())
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String   // "created", "assigned", "status_changed", "priority_changed", etc.
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())

  @@index([issueId])
  @@index([userId])
}